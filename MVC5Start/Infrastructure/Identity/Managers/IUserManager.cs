using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;
using MVC5Start.Models.Identity;
using MVC5Start.ViewModels.Account;
using MVC5Start.ViewModels.Queries;
using Microsoft.AspNet.Identity;

namespace MVC5Start.Infrastructure.Identity.Managers
{
    public interface IUserManager
    {
        Task<IdentityResult> CreateAsync(User user, string password, params string[] roles);
        Task<IdentityResult> CreateAsync(User user, string password);
        Task<IdentityResult> UpdateAsync(User user);
        void SendConfirmationEmail(int userId, string callBackUrl, string subject, string body);
        void SendPasswordResetEmail(int userId, string callBackUrl, string subject, string body);
        Task<ClaimsIdentity> GenerateUserIdentityAsync(User user);
        Task RecordLastLoginAtAsync(User user);
        Task<bool> IsDisabledAsync(int userId);
        Task<int> FindIdByEmailAsync(string email);
        Task<UserEmailInfo> FindInfoByEmailAsync(string email);
        Task<PersonalInfoViewModel> GetUserPersonalInfoAsync(int userId);
        Task<bool> SaveProfileInfoAsync(PersonalInfoViewModel model, int userId);
        Task<bool> DisableTwoFactorAuthentication(string code, int userId);
        Task<PersonalSettingsViewModel> GetUserPersonalSettingsAsync(int userId);
        Task<bool> SavePersonalSettingsAsync(PersonalSettingsViewModel model, int userId);
        Task<ClaimsIdentity> CreateIdentityAsync(User user, string authenticationType);
        Task<IdentityResult> CreateAsync(User user);
        Task<IdentityResult> DeleteAsync(User user);
        Task<User> FindByIdAsync(int userId);
        Task<User> FindByNameAsync(string userName);
        Task<User> FindAsync(string userName, string password);
        Task<bool> CheckPasswordAsync(User user, string password);
        Task<bool> HasPasswordAsync(int userId);
        Task<IdentityResult> AddPasswordAsync(int userId, string password);
        Task<IdentityResult> ChangePasswordAsync(int userId, string currentPassword, string newPassword);
        Task<IdentityResult> RemovePasswordAsync(int userId);
        Task<string> GetSecurityStampAsync(int userId);
        Task<IdentityResult> UpdateSecurityStampAsync(int userId);
        Task<string> GeneratePasswordResetTokenAsync(int userId);
        Task<IdentityResult> ResetPasswordAsync(int userId, string token, string newPassword);
        Task<User> FindAsync(UserLoginInfo login);
        Task<IdentityResult> RemoveLoginAsync(int userId, UserLoginInfo login);
        Task<IdentityResult> AddLoginAsync(int userId, UserLoginInfo login);
        Task<IList<UserLoginInfo>> GetLoginsAsync(int userId);
        Task<IdentityResult> AddClaimAsync(int userId, Claim claim);
        Task<IdentityResult> RemoveClaimAsync(int userId, Claim claim);
        Task<IList<Claim>> GetClaimsAsync(int userId);
        Task<IdentityResult> AddToRoleAsync(int userId, string role);
        Task<IdentityResult> AddToRolesAsync(int userId, params string[] roles);
        Task<IdentityResult> RemoveFromRolesAsync(int userId, params string[] roles);
        Task<IdentityResult> RemoveFromRoleAsync(int userId, string role);
        Task<IList<string>> GetRolesAsync(int userId);
        Task<bool> IsInRoleAsync(int userId, string role);
        Task<string> GetEmailAsync(int userId);
        Task<IdentityResult> SetEmailAsync(int userId, string email);
        Task<User> FindByEmailAsync(string email);
        Task<string> GenerateEmailConfirmationTokenAsync(int userId);
        Task<IdentityResult> ConfirmEmailAsync(int userId, string token);
        Task<bool> IsEmailConfirmedAsync(int userId);
        Task<string> GetPhoneNumberAsync(int userId);
        Task<IdentityResult> SetPhoneNumberAsync(int userId, string phoneNumber);
        Task<IdentityResult> ChangePhoneNumberAsync(int userId, string phoneNumber, string token);
        Task<bool> IsPhoneNumberConfirmedAsync(int userId);
        Task<string> GenerateChangePhoneNumberTokenAsync(int userId, string phoneNumber);
        Task<bool> VerifyChangePhoneNumberTokenAsync(int userId, string token, string phoneNumber);
        Task<bool> VerifyUserTokenAsync(int userId, string purpose, string token);
        Task<string> GenerateUserTokenAsync(string purpose, int userId);
        void RegisterTwoFactorProvider(string twoFactorProvider, IUserTokenProvider<User, int> provider);
        Task<IList<string>> GetValidTwoFactorProvidersAsync(int userId);
        Task<bool> VerifyTwoFactorTokenAsync(int userId, string twoFactorProvider, string token);
        Task<string> GenerateTwoFactorTokenAsync(int userId, string twoFactorProvider);
        Task<IdentityResult> NotifyTwoFactorTokenAsync(int userId, string twoFactorProvider, string token);
        Task<bool> GetTwoFactorEnabledAsync(int userId);
        Task<IdentityResult> SetTwoFactorEnabledAsync(int userId, bool enabled);
        Task SendEmailAsync(int userId, string subject, string body);
        Task SendSmsAsync(int userId, string message);
        Task<bool> IsLockedOutAsync(int userId);
        Task<IdentityResult> SetLockoutEnabledAsync(int userId, bool enabled);
        Task<bool> GetLockoutEnabledAsync(int userId);
        Task<DateTimeOffset> GetLockoutEndDateAsync(int userId);
        Task<IdentityResult> SetLockoutEndDateAsync(int userId, DateTimeOffset lockoutEnd);
        Task<IdentityResult> AccessFailedAsync(int userId);
        Task<IdentityResult> ResetAccessFailedCountAsync(int userId);
        Task<int> GetAccessFailedCountAsync(int userId);
    }
}